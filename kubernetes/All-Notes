============================================
ReplicaSet YAML
============================================

kind: ReplicaSet
apiVersion: apps/v1
metadata:
 name: myrs
spec:
 replicas: 3 # desired number of PODs
 selector: # query to select pods with matching labels
  matchLabels:
   type: webserver
 template: #heretemplate is Pod template,i.e.what should be on the POD,you are writing Pod details
  metadata:
   labels: # here labels is key and value given by user to group similar pods
    type: webserver
    app: java
    author: sonal
  spec: # this is pod specification
   containers:
    - name: c1
      image: nginx

=======================================================
Service Demo
==================================================

Lab Execution Steps:
Delete all exisitng replicaSet
kubectl delete replicaset myrs

Create Replicas using ReplicaSet YAML file
kubectl create -f https://raw.githubusercontent.com/Sonal0409/Container-Orchestration-using-Kubernetes/main/Day2-Notes/ReplicaSet-Demo/ReplicaSet.yml

kubectl get pods

kubectl get pods --show-labels

Create ClusterIp service
kubectl create -f https://raw.githubusercontent.com/Sonal0409/Container-Orchestration-using-Kubernetes/main/Day2-Notes/ServicesDemo/ClusterIPDemo/Service1.yml

Validate:
kubectl get svc

Note down the service details:

mysvc1 ClusterIP 10.102.177.192 80/TCP 6m2s

Validate if a new pod is able to communicate with ngix replicas using cluster IP
create a new ubuntu pod for testing:

kubectl create -f https://raw.githubusercontent.com/Sonal0409/Container-Orchestration-using-Kubernetes/main/Day2-Notes/ServicesDemo/ClusterIPDemo/ubuntupod.yml

Check ubuntu pod is running:

kubectl get pods

Log into Ubuntu pod

kubectl exec -it ubuntupod -- bash

Execute command to install curl package

apt-get update && apt-get install curl -y

Send a request to cluster ip, it will forward the request to any of the pod with target port as 80 and label as type=webserver

curl 10.102.177.192:80

NodePort:
=====================================

Lab Execution Steps:
Delete all exisitng replicaSet
kubectl delete all --all

Create new replicaSet and Nodeport Service
kubectl create -f https://raw.githubusercontent.com/Sonal0409/Container-Orchestration-using-Kubernetes/main/Day2-Notes/ServicesDemo/NodePortDemo/Service2.yml

Validate:
kubectl get all

kubectl get svc

service/mysvc NodePort 10.105.31.132 80:32111/TCP

Copy the node port.

Access the pod application by using MASTER VM desktop and node port
Go to Matser VM, and click on Desktop

Open the browser and give:

localhost:32111

You will see the request sent to your pod.
============================================

Deployment
===========================================

Lab execution steps:
Execute below steps:

Create the deployment object and Nodeport service:
kubectl create -f https://raw.githubusercontent.com/Sonal0409/Container-Orchestration-using-Kubernetes/main/Day2-Notes/Deployment/deployment.yml

Validate:
kubectl get all

kubectl get deployment kubeserve -o wide

kubectl set image deploy kubeserve app=leaddevops/kubeserve:v2

kubectl rollout status deploy kubeserve

kubectl get all

kubectl get deployment kubeserve -o wide

kubectl set image deploy kubeserve app=leaddevops/kubeserve:v3

lets rollback to older version of image:
kubectl rollout undo deploy kubeserve

Delete the deployment:
kubectl delete deploy kubeserve

kubectl get all
============================================

HPA:
=============================================
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      name: nginxpod
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: nginx:latest
          resources:
            limits:
              cpu: 10m

---

apiVersion: v1
kind: Service
metadata:
  name: nginx-svc
spec:
  type: ClusterIP  ## this is default if we do not type in service definition
  selector:
    app: nginx
  ports:
   - protocol: TCP
     port: 80
     targetPort: 80

---

apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: nginx-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: nginx
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 5

Load generator code:
kubectl run -i --tty load-generator --rm --image=busybox --restart=Never -- /bin/sh -c "while sleep 0.01; do wget -q -O- http://serviceip:80; done"

========================================================
========================================================

ConfigMap:
=========================================================
 # vim dev.properties
app.env:dev
app.mem=2048m
app.properties=dev.env.url
:wq!

# kubectl create configmap dev-config1 --from-file=dev.properties
# kubectl get configmap
# kubectl get configmap dev-config1 -o yaml

Use configmap for a pod

vim pod-configmap.yml

kind: Pod
apiVersion: v1
metadata:
 name: pod-configmap
spec:
 containers:
  - image: nginx
    name: c1
    volumeMounts:
     - name: config-volume
       mountPath: /etc/config
 volumes:
  - name: config-volume
    configMap:
     name: dev-config1
 restartPolicy: Never
 
 :wq!
 
 # kubectl apply -f pod-configmap.yml
 # kubectl exec -it pod-configmap bash
 # cd /etc/config
 
 you will find the dev.properties file and configurations
 
 Edit the configMAP
 
 kubectl edit configmap -n <namespace> <configMapName> -o yaml

This opens up a vim editor with the configmap in yaml format. Now simply edit it and save it.

====================================
Persistent Volume:
===============================

apiVersion: v1
kind: PersistentVolume
metadata:
 name: block-pv
spec:
 storageClassName: manual
 capacity: 
  storage: 1Gi
 accessModes:
  - ReadWriteOnce
 hostPath:
  path: /tmp/data
  
  # kubectl create -f pv.yml
  
  ======================================
  
  apiVersion: v1
kind: PersistentVolumeClaim
metadata:
 name: pvc
spec:
 storageClassName: manual
 accessModes:
  - ReadWriteOnce
 resources:
  requests:
   storage: 1Gi
   
   # kubectl create -f pvc.yml
   
   ================================
   apiVersion: v1
kind: Pod
metadata:
 name: pod-pvc
spec:
 containers:
  - image: nginx
    name: c1
    volumeMounts:
     - mountPath: "/data"
       name: my-volume
 volumes:
  - name: my-volume
    persistentVolumeClaim:
     claimName: pvc
     
     # kubectl create -f pod-pvc.yml


Namespace:

# kubectl get namespace

default namespace: holds all your resources created in cluster

Kube-system: Hold pods created for kubernetes components

If there is no namespace:
===========================

Run this YAMl file to create a POD => pod will be create din default namespace

kind: Pod
# apiVersion defines which code schema that k8s will use to create the object
apiVersion: v1
metadata:
 name: pod1 
spec: # specify what is it that we want on the POD (containers)
 containers:
  - name: c1
    image: nginx
  - name: c2
    image: tomcat
  - name: c3
    image: ubuntu
    command: ["bash", "-c", "sleep 6000"]


kubectl create -f pod-defintion.yml 

kubectl describe pod pod1 | less  

==> namespace is default

kubectl delete pod --all 

all pods from default namespace gets deleted.

Solution:

How to create a new namespace:

===============================

kubectl create namespace dev

kubectl get namespace


Create a pod in new namespace

kind: Pod
# apiVersion defines which code schema that k8s will use to create the object
apiVersion: v1
metadata:
 name: pod1 
 namespace: dev
spec: # specify what is it that we want on the POD (containers)
 containers:
  - name: c1
    image: nginx
  - name: c2
    image: tomcat
  - name: c3
    image: ubuntu
    command: ["bash", "-c", "sleep 6000"]


# kubectl create -f pod-defintion.yml

# kubectl get pods -n dev

# kubectl delete pods --all -n dev


Namespace can be used for all the object that you have created so far : Pods, replicas, Deployment & service

Namepsace is not used for PV or PVC as they are cluster level objects
Pods from any namespace can access the volumes

==============================================================

Prometheous Demo:
==============================================================

Step1 : Install kubestate metrics server on kubernetes cluster

in the k8s cluster:
========================
git clone https://github.com/Sonal0409/DevOps_ClassNotes.git
cd DevOps_ClassNotes
cd Kubernetese
cd Monitoring
cd kube_state_metrics/standard

execute below command to run all the yaml files

kubectl create -f .

after this  ==>

cd ../..

ls

kubectl create -f prometheous.yml

kubectl get all -n monitoring

Take the ip of VM and node port number and access prometheous pod

Create grafana container on any VM with docker on it

# docker run -d -P --name grafana grafana/grafana

# docker ps -a

Access the grafana dashboard by using ipaddress of vm and port number.
